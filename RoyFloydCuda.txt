#include <stdlib.h>
#include<iostream.h>
#include<time.h>
#include <cstdlib>

#define N 5
using namespace std;



__global__ void RoyFloydCuda(int graf[N][N], int k)
{
	int i = threadIdx.x;
	int j = threadIdx.y;
	
		if (graf[i][k] + graf[k][j] < graf[i][j])
		{
			graf[i][j] = graf[i][k] + graf[k][j];
		}
	
}

int main(int argc, char** argv)
{      
    //Alocare memorie host CPU
	int h_graf[N][N] =
	{
		0,3,9,8,3,
		5,0,1,4,2,
		6,6,0,4,5,
		2,9,2,0,7,
		7,9,3,2,0
	};

	size_t size = N * N * sizeof(int);

     //Alocare memorie placa grafica GPU
	int* d_graf;
	cudaMalloc(&d_graf, size);
	
    //Copiere host pe placa grafica
	cudaMemcpy(d_graf, h_graf, size, cudaMemcpyHostToDevice);
	
	int numBlocks = 1;
	dim3 threadsPerBlock(N, N);

    //Pentru fiecare k apel kernel
	for (int k = 0; k < N; k++)
	{
		RoyFloydCuda <<<numBlocks, threadsPerBlock >>>(graf, k);
	}

    //Copiere continut placa grafica pe host
	cudaMemcpy(h_graf, d_graf, size, cudaMemcpyDeviceToHost);
	
	//Eliberare memorie placa grafica GPU
	cudaFree(d_graf);
	
	
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cout << graf[i][j] << " ";
		}
		cout << '\n';
	}
	return 0;
}
